


**Enlaces de interés
    js13kgames: competición de videojuegos de HTML5 (no puede pesar más de 13KB). Se hace del 13 de ago al 13 de sep
    electronjs: hacer aplicaciones de escritorio en HTML5
    chart.js: importar gráficos
    https://regexr.com: practicar regular expresions
    whatsmydns: página web para comprobar DNS
    opendatasoft: página de datos

**Conceptos generales
    Terminal / Consola : Entorno de entrada/salida de texto, ejecutada por el programa konsola
    Shell Bash : Intérprete de la línea de comandos, se encarga de ejecutarlos.
    $ : prompt, indicador para introducir el siguiente comando.
    Comando: programa que será ejecutado por Bash
    # formato estándar de un comando: $ comando [[-]opción( es)] [argumento(s) de opción(es)]
        *[-]opción(es): es uno o más modificadores que cambian el comportamiento de un comando.
        *[argumento(s) de opción(es)]: indica los objetos sobre los que va a operar el comando
    # info: Si accedemos como #root podemos hacer o deshacer
            lo que queramos dentro del sistema, ¡incluido borrarlo!
    apt: gestor de paquetes de linux
    npm: gestor de paguetes de nodejs
    npx: similar a npm pero con lógica (ejecutar acciones automáticas...)
    yarn: gestor de paquetes alternativo a npm (no utiliza nodejs)

**Comandos consola

    cd : Cambia de un directorio a otro (ruta relativa vs. ruta absoluta)
    cd .. : cambia al fichero de la ruta anterior
    pwd : Muestra la ruta del directorio actual.
    cp : Copiar ficheros o directorios.
    mv : mover o renombrar un directorio.
    mkdir : Crea un directorio.
    rm : Elimina un fichero.
    rmdir: Elimina un directorio
    touch : crea un nuevo archivo.
    chown <user:group> <fichero o directorio>: cambiar el usuario y el grupo propietario para un fichero o 
                                                directorio.
    ls : Lista los nombres de los ficheros.
    adduser "nombre usuario" "nombre grupo": añade un usuario a un grupo
    pipe ( | ): es una barra horizontal e indica que al comando de la derecha le pasamos los datos del comando de la izquierda
    <comando> | less : Visualiza el fichero paginado (más cómodo).
    grep "string": busca en un archivo el string entre comillas (ej. cat test.txt | grep "a")
    echo: Envía un string a la salida estándar (el terminal).
        echo "mensaje" > archivo : elimina todo el texto del archivo y lo cambia por el mensaje
        echo "mensaje" >> archivo : añade el mensaje al texto que tiene el archivo
        echo "mensaje" 2> archivo : guarda los mensajes de error en el archivo
    cat: muestra el contenido de un archivo
    tail: se muestra el archivo en tiempo real
        tail -fn 200 "archivo": muestra las últimas 200 líneas del archivo indicado
    clear : Limpia la consola.
    man : Muestra información del comando que le indiquemos a continuación.
    whoami : ver el usuario activo.
    sudo su : cambiar a usuario root
    sudo <comando> : Ejecutar un comando con privilegios de administrador. exit : salir del usuario actual o del 
                    terminal
    sudo apt update: comprobar actualizaciones
    sudo apt upgrade: confirma las actualizaciones
    apt install git: instalar git
    passwd : Cambio de contraseña.
    date: Muestra la hora y la fecha.
    cal: Muestra un calendario.
    exit : salir de la sesión actual o del terminal
    nano : abre un editor de documentos y se puede modificar el contenido
    du -h "archivo": muestra el peso del archivo. Si no indicamos el archivo, nos dice el tamaño de la ruta en la que estamos
    df: indica los espacios de almacenamiento del sistema
    ln: enlaces simbólicos. Archivos que apuntan a otros archivos.
    ctrl+shift+t : abre una pestaña nueva de la consola
    history : abre el historial de comandos usados en la consola
    history | grep npx: nos busca en el historial los comandos que tengan el string indicado (npx en este caso)
    history -c : borra el historial de comandos de la consola
    man [comando] : abre el manual del comando que necesitemos de manera detallada
    [comando] --help : abre ayuda para recordarnos las opciones del comando
    sudo netstat -tupln: muestra todos los procesos que se están ejecutando en los puertos
    kill -l: Muestra las acciones que se pueden hacer con kill
    sudo kill -9 <PID>: mata el proceso con el PID indicado
    host "url(sin www.)" : muestra la IP de la url
    curl: transfiere datos desde o hacia un servidor
    chmod 777 "nombre archivo": cambia permisos en un archivo/carpeta. El código numérico hace referencia a qué permisos cambiar 
    ssh "usuario@servidor": acceso al usuario x del servidor y
    ssh-keygen: genera una clave ssh
        ssh-keygen -t rsa -b 4096: sobrecarga con -t para indicar el algoritmo y -b para indicar el tipo de vueltas de ese algoritmo
    crontab -e: programador de tareas
    systemctl list-units --type=service: muestra una lista con todos los daemons (programas que se ejecutan en segundo plano)
    service: hace lo mismo que el comando anterior
    ping "dirección del servidor": establece comunicación con el servidor y lanza la dirección ip

*Servidores
    ovhcloud --> servidor
    s3 --> guardado de imágenes
    wix --> dominioss
    axarnet --> servidor dedicado en España
    htop: muestra datos de los core del servidor
    /etc/apache2/sites-available --> $nano 000-default.conf: abre la configuración de apache respecto a las páginas disponibles
    sudo service apache2 reload: recarga apache y es necesario después de cambiar cualquier configuración

**Establecer un alias:

    1) (en consola) code /home/aitor/.bashrc : abre visualstudio con el archivo bash y 
            sirve para crear un alias
    2)(en VS) alias goCode="cd <ruta>":
            # goCode es el nombre del alias
    3) (en consola) source ~/.bashrc : acepta el código y lo mantiene en la memoria 
            aunque se apague el ordenador

**Comandos generales Git

    $ git : es el comando general para usar Git. Escribiremos git y posteriormente la acción que
            queremos que Git ejecute.
    $ git --version : muestra la versión de git instalada.
    $ git init : crea un nuevo repositorio o reinicializa uno existente.
    $ git config --global user.name "John Doe" : configura tu nombre de usuario.
    $ git config --global user.email “johndoe@example.com” : configura el email.
    $ git status : muestra los cambios en el árbol de trabajo.
    $ git add <file or folder> : especificará qué quieres controlar bajo el VCS. 
                    Todo lo que se añada, estará sujeto al futuro registro de cambios
    $ git add . : añade todos los archivos al stage area
    $ git commit : guarda los cambios realizados en el histórico de cambios. Llevará una descripción del
                    trabajo guardado. Por comodidad, esta descripción se agrega al comando con el parámetro -m y la
                    descripción entre comillas: “nuevo menú de navegación”
    $ git log : muestra el registro de los commits realizados.
    $ git log --oneline : da la información de los commits en formato reducido
    $ git diff : Muestra línea por línea las diferencias que hay en los archivos respecto a los ya registrados.
    $ git clone <URL> : descarga desde la URL indicada, una copia de un repositorio remoto en nuestra máquina.
    $ git pull : Descarga los cambios del repositorio remoto. Todos los cambios estarán disponibles en tu copia local.
    $ git remote -v : imprimirá la lista de nombres de repositorios guardados como marcadores, además de
                    la URL del repositorio correspondiente.
    $ git remote add origin <URL_OF_REMOTE> : creará un nuevo registro de conexión con un repositorio remoto.
    $ git push : Envía o sube los cambios al repositorio remoto de los últimos commits .
    $ git push -u origin master : especifica a dónde vamos a subirlo,es decir, configura la subida al
                    remoto llamado origin y rama (branch)
    $ git reset --hard HEAD^ : restaura el repositorio al penúltimo commit
    $ git restore --staged <archivo> : elimina los cambios añadidos al staging area
    $ git commit --amend : nos permite modificar el mensaje del último commit sin añadir uno nuevo.

**Comandos branches Git

    $ git branch <branch_name> : crea una nueva rama llamada branch_name
    $ git checkout <branch_name> : cambiar a la rama branch_name
    $ git branch : muestra todas las ramas existentes.
    $ git checkout -b <branch_name> : crea una nueva rama llamada branch_name y se cambia a esa rama.
    $ git branch -d <branch_name> : elimina la rama llamada branch_name
    $ git merge <branch_name> : fusiona la rama branch_name en la rama actual.

**Comunicación con GitHub
    
    $ git remote add upstream <URL> : añade una conexión nueva a un repo diferente
    $ git fetch upstream : carga la información de la fuente upstream
    $ git merge upstream/main : une la información cargada de upstream con mi main

**REGEX
    . : cualquier cosa
    * : que contenga todos los caracteres indicados
    ^ : que empieze por
    $ : que termine por
    []: que esté en rango 

**NodeJS
    node: ejecuta la shell de node
    dentro de shell de node -> require("cripto").randomBytes(64).toString("hex"): crea caracteres aleatorios útiles para usarlos como semilla
    npm init: inicia el proyecto y me crea un json. Datos a indicar -> nombre de paquete, versión de mi proyecto, descripción, 
            punto de entrada (archivo principal que se cargará primero. ej. index.json)...
    npm i express: instala express y lo añade a mis dependencias
    npm i --save-dev nodemon: instala nodemon y lo añade a mis dev dependecies
    node "ruta_de_archivo_js": ejecuta el archivo js en la consola
    scripts:{"start":"nodemon nombre_archivo"}: hacerlo en package.json para ejecutar con npm start el código
    npm i mongoose: instala mongoose
    npm i mongoose-unique-validator: instala un validador del error de tipo "unique"
    npm i ramda: librería útil de js (se puede utilizar para delimitar valores aceptados en un request)
    npm i bcrypt: instalar bcrypt (encriptado de contraseñas)
    npm i jsonwebtoken: instalar el paquete para implementar el token de verificación de sesión
    npm i cors: instalar gestor de cors
    npm i nodemailer: instalar nodemailer para el envío de correos
    npm i uuid: intalar creador de uuids
    npm i dotenv: instalar dotenv si utilizamos modules (luego importar "dotenv/config")
    sudo sysctl fs.inotify.max_user_watches=582222 && sudo sysctl -p: quitar problemas de "watch"

**YARN 
    curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -: instal de yarn key
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list: enable the yarn repo
    sudo apt update && sudo apt install yarn: update the cache and install yarn

**PhP
    sudo apt install composer: instala composer (similar a npm pero para php)
    composer init: iniciar composer (similitudes composer = npm, composer.json = package.json, node_modules = vendor)
    composer install: descargar dependencias de composer (al clonar un proyecto con php)
    composer require --dev phpunit/phpunit: descargar dependencias de php
    ./vendor/phpunit/phpunit/phpunit "ruta archivo" : ejecutar un archivo php
    ./vendor/phpunit/phpunit/phpunit "ruta archivo" --testdox: ejecutar un archivo php con test y lanza un resumen del resultado
    


**Sass

    Descargar node y npm:   1) curl sL https://deb.nodesource.com/setup_16.x | sudo -E bash - :  añadimos la ruta al sistema
                            2) sudo apt get install -y nodejs: se descarga
    sudo npm install -g sass: Instalar Sass
    sass --watch "carpeta_scss":"carpeta_css": Compilar carpeta Sass
    sass --no-source-map: Evita crear la carpeta de map

**Typescript

    Descargar typescript en un proyecto local: 1) cd "directorio": Ir al directorio
                                               2) npm install typescript --save-dev: Aplicar la instalación
    npx tsc -version: comprobar la versión de typescript
    npx tsc "ruta del archivo": transpilar un archivo ts
    npx tsc --init: entrar en opciones de ts 
    Configurar ts para que compile en js ES6:  {
                                                    "compilerOptions":{
                                                        "target": "es6",
                                                        "module": "commonjs"
                                                    }
                                                }
    npx tsc -p tsconfig.json: forzar la configuración que le hemos pasado (por si no carga automáticamente)
    npx tsc --target es3 (es6...): indicar mediante comandos la versión de js de la transpilación 
    
**JEST

    nmp instal --save-dev jest: descargar jest
    ./node_modules/.bin/jest --init: inicializar jest
    npm test: pasar el test (1ª forma)
    npx jest: pasar el test (2ªforma)
    en el archivo jest.config.js --> buscar la línea 124 y quitar el comentario --> establecer: rootDir:"ruta del archivo"

**REACT

    npm create vite@latest <nombre-de-mi-proyecto>: crea el entorno de React par comenzar con el proyecto (nombre del proyecto sin mayúsculas ni espacios)(es necesario tener nodejs)
    cd "nombre_proyecto": nos lleva a la ruta de nuestro proyecto
    npm start: arrancamos el servidor virtual
    npm install: cuando clono un repo de react que no tiene node_modules y quiero descargarlos (coge la info del fichero json)
    npm update: me actualiza la información de npm. Si añadimos --force, fuerza la actualización de toda la info
    npm install bootstrap: instala el paquete de bootstrap en nuestro proyecto
    npm i sweetalert: insala el personalizador de alerts
    npm install react-router-dom: descargar el gestor de rutas de react
    npm install --save-dev gh-pages: descargar solo para desarrolo (no para producción). Descargamos gh-pages para usar GitHub como servidor
    npm run build: monta la carpeta de proyecto lista para subirla al servidor. Cada vez que modificamos el package.json hay que volver a lanzarlo
    En package.json -> añadir {"homepage":"url-de-destino"}: será donde se suba nuestro proyecto
    En package.json -> en "scripts" añadir {"predeploy":"npm run build", "deploy":"gh-pages -d build"}: se le indica "gh-pages" para que se sincronice automáticamente
    npm run deploy: envía el build a la dependencia indicada en scripts -> deploy. Gracias a "predeploy" siempre me va a hacer build automáticamente

**MySQL
    
    sudo apt lamp-server^ (wamp para windows, mamp para windows): instala el paquete de de archivos para usar MySQL (linux-apache-mysql-php,pearl,python)
    sudo mysql -u root: accede al usuario de mysql establecido en root y con los permisos de root
    sudo mysql -u root -p: para acceder a mysql y nos pida la contraseña
    ALTER USER 'root'@'localhost' IDENTIFIED WITH BY "new-password";: cambia la contraseña de mySQL que se encuentra en root@localhost y le establece la que ponemos entre comillas
    Crear nuevo usuario:    1) CREATE USER 'usuario'@'localhost' IDENTIFIED BY 'contraseña';
                            2) GRANT ALL ON *.* TO 'usuario'@'localhost';

**PhpMyadmin

    sudo apt install phpmyadmin: instala el programa phpadmin 
                (en la confi, para seleccionar apache es necesario darle a barra espaciadora antes de darle a enter. Asegurarnos que hay un asterisco en la opción escogida)
    En navegador-> localhost/phpmyadmin: nos abre la interfaz de phpmyadmin (introducir usuario y contraseña de la base de datos a gestionar)

**MongoDB

    wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc |  gpg --dearmor | sudo tee /usr/share/keyrings/mongodb.gpg > /dev/null: paso 1 para instalación
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list: paso 2 para instalación
    sudo apt update: paso 3 para instalación
    sudo apt install mongodb-org: paso 4 para instalación
    
    Si falla mongo, usar estos comandos:
        sudo service mongod stop
        sudo apt-get purge mongodb-org*
        sudo rm -r /var/log/mongodb
        sudo rm -r /var/lib/mongodb
        sudo apt-get install -y mongodb-org


**Guía comandos Markdown
    
    https://www.markdownguide.org/cheat-sheet/